@startuml Program
class "ClusteringProblem<S>" {
    -samples: std::vector<S>

    -sampleMapping
    -relevantTriples
    -relevantPairs
    
    -label: std::map<Upair,int64_t>
    -cutTriples: std::set<Utriple>
    -resultingCost: int64_t

    -solve(relevant): void
    -apply...Condition(relevant): bool

    +ClusteringProblem(samples, tripleCostCB, pairCostCB, logFile)
    +solve(): void
    +getLabels(): std::map<Upair,int64_t>
}

class "ClusteringInstance<S>" {
    +unlabeledSamples: std::vector<S>
    +actualClustering
    +tripleCost
    +pairCost

    +ClusteringInstance(labeledSamples, tripleCostCB, pairCostCB)

    +evaluateLabels(labels)
    +evaluateCosts()
}

class "Utuple<N,S>"{
}

class MinCut <<namespace>> {
    solveMinCut(graph, s, t): int64_t
    solveGlobalMinCut(graph): int64_t
}

' class Instances <<interface>> {
'     generateSpaceInstance(planeCount, pointsPerPlane, maxDistance, noise): ClusteringInstance<Space::Point>
'     createSpaceCostFunction(points, maxDistance, noise): std::function<int64_t(Utuple<3,Space::Point>)>
' }

' namespace Space {
    
'     class Point {
'         +x: double
'         +y: double
'         +z: double
'         +name: std::string
'     }

'     class Vector {
'         +x: double
'         +y: double
'         +z: double
'         +Vector(const Point &p);
'         +operator+(other): Vector
'         +operator-(other): Vector
'         +operator*(other): Vector
'         +crossProduct(other): Vector
'         +getLength(): double
'         +getAngle(other): double
'         +getNormalizedVector(): Vector
'         +generateOrthogonalVector(): Vector
'     }

'     class Plane {
'         +n: Vector
'         +r1: Vector
'         +r2: Vector
'         +Plane(norm)
'         +generatePoints(pointCount, startNum, maxDistance, noise)
'     }

'     class SpaceUtility <<utility>> {
'         generateDistinctPlanes(planeCount)
'         generateSamplePointsOnDistinctPlanes(planeCount, pointsPerPlane, maxDistance, noise)
'     }
' }



"ClusteringProblem<S>" .. "ClusteringInstance<S>"
"ClusteringProblem<S>" --> MinCut
"ClusteringProblem<S>" --> "Utuple<N,S>"
' Instances --> "ClusteringInstance<S>"
' Instances --> Space

@enduml